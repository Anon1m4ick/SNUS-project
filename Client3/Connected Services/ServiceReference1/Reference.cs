//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client3.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SensorMessage", Namespace="http://schemas.datacontract.org/2004/07/ProjectSNUS")]
    [System.SerializableAttribute()]
    public partial class SensorMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequenceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] VectorClockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SequenceNumber {
            get {
                return this.SequenceNumberField;
            }
            set {
                if ((this.SequenceNumberField.Equals(value) != true)) {
                    this.SequenceNumberField = value;
                    this.RaisePropertyChanged("SequenceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] VectorClock {
            get {
                return this.VectorClockField;
            }
            set {
                if ((object.ReferenceEquals(this.VectorClockField, value) != true)) {
                    this.VectorClockField = value;
                    this.RaisePropertyChanged("VectorClock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(Client3.ServiceReference1.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterSensor", ReplyAction="http://tempuri.org/IService1/RegisterSensorResponse")]
        void RegisterSensor(int sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterSensor", ReplyAction="http://tempuri.org/IService1/RegisterSensorResponse")]
        System.Threading.Tasks.Task RegisterSensorAsync(int sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UnregisterSensor", ReplyAction="http://tempuri.org/IService1/UnregisterSensorResponse")]
        void UnregisterSensor(int sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UnregisterSensor", ReplyAction="http://tempuri.org/IService1/UnregisterSensorResponse")]
        System.Threading.Tasks.Task UnregisterSensorAsync(int sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BroadcastMessage", ReplyAction="http://tempuri.org/IService1/BroadcastMessageResponse")]
        void BroadcastMessage(Client3.ServiceReference1.SensorMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BroadcastMessage", ReplyAction="http://tempuri.org/IService1/BroadcastMessageResponse")]
        System.Threading.Tasks.Task BroadcastMessageAsync(Client3.ServiceReference1.SensorMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/ReceiveMessage")]
        void ReceiveMessage(Client3.ServiceReference1.SensorMessage message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client3.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<Client3.ServiceReference1.IService1>, Client3.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterSensor(int sensorId) {
            base.Channel.RegisterSensor(sensorId);
        }
        
        public System.Threading.Tasks.Task RegisterSensorAsync(int sensorId) {
            return base.Channel.RegisterSensorAsync(sensorId);
        }
        
        public void UnregisterSensor(int sensorId) {
            base.Channel.UnregisterSensor(sensorId);
        }
        
        public System.Threading.Tasks.Task UnregisterSensorAsync(int sensorId) {
            return base.Channel.UnregisterSensorAsync(sensorId);
        }
        
        public void BroadcastMessage(Client3.ServiceReference1.SensorMessage message) {
            base.Channel.BroadcastMessage(message);
        }
        
        public System.Threading.Tasks.Task BroadcastMessageAsync(Client3.ServiceReference1.SensorMessage message) {
            return base.Channel.BroadcastMessageAsync(message);
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
    }
}
